language: cpp
virt: lxd

matrix:
  include:
    - os: linux
      dist: bionic
      compiler: "gcc"
      env: BUILD='Debug' CC=gcc CXX=g++ COVERAGE=1 COV_EXE=gcov
      addons:
        apt:
          packages:
            - cmake
            - ninja-build
            - lcov
            - libboost-program-options-dev

    - os: linux
      dist: bionic
      compiler: "gcc"
      env: BUILD='Release' CC=gcc CXX=g++ COVERAGE=0
      addons:
        apt:
          packages:
            - cmake
            - ninja-build
            - libboost-program-options-dev

    - os: linux
      dist: bionic
      compiler: "gcc-9"
      env: BUILD='Release' CC=gcc-9 CXX=g++-9 COVERAGE=0
      addons:
        apt:
          sources:
            - sourceline: 'ppa:ubuntu-toolchain-r/test'
          packages:
            - cmake
            - ninja-build
            - gcc-9
            - g++-9
            - libboost-program-options-dev

    - os: linux
      dist: bionic
      compiler: "clang-9"
      env: BUILD='Release' CC=clang-9 CXX=clang++-9 COVERAGE=0
      addons:
        apt:
          sources:
            - sourceline: 'deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-9 main'
              key_url: 'https://apt.llvm.org/llvm-snapshot.gpg.key'
          packages:
            - cmake
            - ninja-build
            - clang-9
            - libboost-program-options-dev

    - os: osx
      osx_image: xcode11.3
      compiler: "clang"
      env: BUILD='Release' CC=clang CXX=clang++ COVERAGE=0
      addons:
        homebrew:
          packages:
            - cmake
            - ninja
            - boost
          update: true

    - os: windows
      env:
        - BUILD='Release'
        - COVERAGE=0
      install:
        - cmake --version
        - wget https://dl.bintray.com/boostorg/release/1.70.0/source/boost_1_70_0.7z --no-check-certificate
        - 7z x boost_1_70_0.7z -o/C/local
        - cd "/C/local/boost_1_70_0"
        - ./bootstrap.bat
        - ./b2.exe -j8 toolset=msvc-14.1 address-model=64 link=static threading=multi runtime-link=shared variant=release --build-type=minimal --with-program_options
        - cd "/C/Users/travis/build/iic-jku/ddsim"
        - export Boost_DIR="/C/local/boost_1_70_0"
        - setx path "%path%;c:\local\boost_1_70_0"
        - setx lib "%lib%;c:\local\boost_1_70_0\stage\lib"
        - setx libpath "%libpath%;c:\local\boost_1_70_0\stage\lib"

install:
  - if [ "$TRAVIS_OS_NAME" = "osx" ]; then
    export PATH="$(brew --prefix llvm)/bin:$PATH";
    export LIBRARY_PATH=$LIBRARY_PATH:/usr/local/lib;
    fi
  - echo ${CC}
  - echo ${CXX}
  - ${CXX} --version
  - cmake --version

before_script:
  - mkdir -p build && cd build
  - |
    if [[ "$TRAVIS_OS_NAME" == "windows" ]]; then
      cmake .. -G "Visual Studio 15 2017" -A x64 -LA -DCMAKE_BUILD_TYPE=${BUILD} -DCOVERAGE=${COVERAGE} -DBoost_USE_STATIC_LIBS=ON -DBoost_USE_MULTITHREADED=ON -DBoost_USE_STATIC_RUNTIME=OFF
    else
      cmake .. -G Ninja -LA -DCMAKE_BUILD_TYPE=${BUILD} -DCOVERAGE=${COVERAGE}
    fi
  - if [ "$TRAVIS_OS_NAME" == "windows" ]; then cmake --build . --config ${BUILD} --target INSTALL; fi
  - if [ "$TRAVIS_OS_NAME" != "windows" ]; then cmake --build . --config ${BUILD} --target ddsim; fi
  - if [ "$TRAVIS_OS_NAME" != "windows" ]; then cmake --build . --config ${BUILD} --target ddsim_simple; fi
  - if [ "$TRAVIS_OS_NAME" != "windows" ]; then cmake --build . --config ${BUILD} --target ddsim_test; fi
  - if [ "$TRAVIS_OS_NAME" != "windows" ]; then sudo cmake --build . --config ${BUILD} --target install; fi
script:
  - ctest -C ${BUILD} --jobs 2 --output-on-failure

after_success:
  - |
    if [[ -n "${COV_EXE}" ]]; then
      # Create lcov report
      lcov --gcov-tool ${COV_EXE} --capture --directory . --base-directory . --output-file coverage.info
      lcov --remove coverage.info '/usr/*' '*/extern/*' '*/BaseResults*' --output-file coverage.info # filter system-files
      lcov --list coverage.info # debug info
      # Uploading report to CodeCov
      bash <(curl -s https://codecov.io/bash) -f coverage.info -t 8bf3bb78-f29a-4f81-8ad1-3a7c4fa781b8 || echo "Codecov did not collect coverage reports"
    fi
